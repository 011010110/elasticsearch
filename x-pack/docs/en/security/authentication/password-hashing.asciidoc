[role="xpack"]
[[password-hashing]]
=== Password hashing

Credential storage for applicable realms ({xpack-ref}/file-realm.html[File Realm] and
{xpack-ref}/native-realm.html[Native Realm]) follows security best practices, in order
to limit exposure to credential theft and mitigate
credential compromise.

Passwords are stored hashed using cryptographically strong and password specific
salt values. Hashing involves the use of an adaptive hash function with a configurable
work factor to suit current and future needs.

You can configure the desirable algorithm to be used for password hashing by setting
the `xpack.security.authc.password_hashing.algorithm` setting to one of the following:

[[password-hashing-algorithms]]
.Password hashing algorithms
|=======================
| Algorithm           | | | Description

| `bcrypt`            | | | Uses `bcrypt` algorithm with salt generated in 1024 rounds. (default)
| `bcrypt4`           | | | Uses `bcrypt` algorithm with salt generated in 16 rounds.
| `bcrypt5`           | | | Uses `bcrypt` algorithm with salt generated in 32 rounds.
| `bcrypt6`           | | | Uses `bcrypt` algorithm with salt generated in 64 rounds.
| `bcrypt7`           | | | Uses `bcrypt` algorithm with salt generated in 128 rounds.
| `bcrypt8`           | | | Uses `bcrypt` algorithm with salt generated in 256 rounds.
| `bcrypt9`           | | | Uses `bcrypt` algorithm with salt generated in 512 rounds.
| `bcrypt10`          | | | Uses `bcrypt` algorithm with salt generated in 1024 rounds.
| `bcrypt11`          | | | Uses `bcrypt` algorithm with salt generated in 2048 rounds.
| `bcrypt12`          | | | Uses `bcrypt` algorithm with salt generated in 4096 rounds.
| `bcrypt13`          | | | Uses `bcrypt` algorithm with salt generated in 8192 rounds.
| `bcrypt14`          | | | Uses `bcrypt` algorithm with salt generated in 16384 rounds.
| `pbkdf2`            | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a
                             pseudorandom function using 10000 iterations.
| `pbkdf2_1000`       | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a
                             pseudorandom function using 1000 iterations.
| `pbkdf2_10000`      | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a
                             pseudorandom function using 10000 iterations.
| `pbkdf2_50000`      | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a
                             pseudorandom function using 50000 iterations.
| `pbkdf2_100000`     | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a
                             pseudorandom function using 100000 iterations.
| `pbkdf2_500000`     | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a
                              pseudorandom function using 500000 iterations.
| `pbkdf2_1000000`    | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a
                             pseudorandom function using 1000000 iterations.
|=======================