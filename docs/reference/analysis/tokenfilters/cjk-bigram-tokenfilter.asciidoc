[[analysis-cjk-bigram-tokenfilter]]
=== CJK Bigram Token Filter

The `cjk_bigram` token filter forms bigrams out of adjacent CJK tokens. If a
CJK character has no adjacent characters to form a bigram, it is output in
unigram form.

By default, bigrams are generated for characters in `han`, `hiragana`,
`katakana` and `hangul`.  All non-CJK input is passed through unmodified.

[float]
=== Example output

[source,js]
---------------------------
POST _analyze
{
  "tokenizer": "standard",
  "filter": [ "cjk_bigram" ],
  "text": "向日葵 ヒマワリ"
}
---------------------------
// CONSOLE

/////////////////////

[source,js]
----------------------------
{
  "tokens": [
    {
      "token": "向日",
      "start_offset": 0,
      "end_offset": 2,
      "type": "<DOUBLE>",
      "position": 0
    },
    {
      "token": "日葵",
      "start_offset": 1,
      "end_offset": 3,
      "type": "<DOUBLE>",
      "position": 1
    },
    {
      "token": "ヒマ",
      "start_offset": 4,
      "end_offset": 6,
      "type": "<DOUBLE>",
      "position": 2
    },
    {
      "token": "マワ",
      "start_offset": 5,
      "end_offset": 7,
      "type": "<DOUBLE>",
      "position": 3
    },
    {
      "token": "ワリ",
      "start_offset": 6,
      "end_offset": 8,
      "type": "<DOUBLE>",
      "position": 4
    }
  ]
}
----------------------------
// TESTRESPONSE

/////////////////////

The above text would produce the following terms:

[source,text]
---------------------------
[ 向日, 日葵, ヒマ, マワ, ワリ ]
---------------------------

Without the `cjk_bigram` filter it would have produced the following terms:

[source,text]
---------------------------
[ 向, 日, 葵, ヒマワリ ]
---------------------------

[float]
=== Configuration

The `cjk_bigram` token filter accepts the following parameters:

[horizontal]

`output_unigrams`::

    Setting `output_unigrams` to `true` will cause the token filter to always
    output both unigrams and bigrams.  Defaults to `false`.

`ignored_scripts`::

    Bigrams are generated for characters in `han`, `hiragana`, `katakana` and
    `hangul`, but bigrams can be disabled for particular scripts with the
    `ignored_scripts` parameter.

[float]
=== Example configuration

In this example, we configure the `cjk_bigram` token filter to output both
unigrams and bigrams for the `han` script only:

[source,js]
----------------------------
PUT my_index
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "standard",
          "filter": [
            "my_filter"
          ]
        }
      },
      "filter": {
        "my_filter": {
          "type": "cjk_bigram",
          "output_unigrams": true,
          "ignored_scripts": [
            "hiragana",
            "katakana",
            "hangul"
          ]
        }
      }
    }
  }
}

GET _cluster/health?wait_for_status=yellow

POST my_index/_analyze
{
  "analyzer": "my_analyzer",
  "text": "向日葵 ヒマワリ"
}
----------------------------
// CONSOLE

/////////////////////

[source,js]
----------------------------
{
  "tokens": [
    {
      "token": "向",
      "start_offset": 0,
      "end_offset": 1,
      "type": "<SINGLE>",
      "position": 0
    },
    {
      "token": "向日",
      "start_offset": 0,
      "end_offset": 2,
      "type": "<DOUBLE>",
      "position": 0
    },
    {
      "token": "日",
      "start_offset": 1,
      "end_offset": 2,
      "type": "<SINGLE>",
      "position": 1
    },
    {
      "token": "日葵",
      "start_offset": 1,
      "end_offset": 3,
      "type": "<DOUBLE>",
      "position": 1
    },
    {
      "token": "葵",
      "start_offset": 2,
      "end_offset": 3,
      "type": "<SINGLE>",
      "position": 2
    },
    {
      "token": "ヒマワリ",
      "start_offset": 4,
      "end_offset": 8,
      "type": "<KATAKANA>",
      "position": 3
    }
  ]
}
----------------------------
// TESTRESPONSE

/////////////////////


The above example produces the following terms:

[source,text]
---------------------------
[ 向, 向日, 日, 日葵, 葵, ヒマワリ ]
---------------------------



